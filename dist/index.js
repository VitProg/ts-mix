"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const mixinsAfterInit="__afterMixins";class MixinAssertError extends Error{}function haveMixin(i,e,n){return"object"==typeof i&&"mixins"in i&&"object"==typeof i.mixins&&e.mixinName in i.mixins&&"object"==typeof i.mixins[e.mixinName]}function haveMixins(i,e,n){if(!("object"==typeof i&&"mixins"in i&&"object"==typeof i.mixins))return!1;for(const n of e)if(!1===haveMixin(i,n))return!1;return!0}function isMixin(i){var e,n,t,o,s,r,x;return"object"==typeof i&&"string"==typeof(null===(e=i)||void 0===e?void 0:e.mixinName)&&"object"==typeof(null===(n=i)||void 0===n?void 0:n.target)&&"object"==typeof(null===(o=null===(t=i)||void 0===t?void 0:t.target)||void 0===o?void 0:o.mixins)&&(null===(s=i)||void 0===s?void 0:s.mixinName)in(null===(x=null===(r=i)||void 0===r?void 0:r.target)||void 0===x?void 0:x.mixins)}function assertHaveMixin(i,e,n,t){if(!1===haveMixin(i,e))throw t instanceof Error?t:new MixinAssertError(null!=t?t:`The object does not have mixin '${e.mixinName}'`)}function assertHaveMixins(i,e,n,t){if(!1===haveMixins(i,e))throw t instanceof Error?t:new MixinAssertError(null!=t?t:`The object does not have one or more of mixins ${e.map(i=>`'${i.mixinName}'`).join(", ")}`)}function mixin(i){const e=i;return Object.assign({target:void 0},e)}function useMixinsForObject(i,e,n,t,o,s,r,x,a,f,c){return applyMixinsInternal(i,!0,e,n,t,o,s,r,x,a,f,c),i}function useMixins(i,e,n,t,o,s,r,x,a,f,c){var u;return(u=class extends i{constructor(...i){super(...i),applyMixinsInternal(this,!0,e,n,t,o,s,r,x,a,f,c)}}).__m_b_type=i,u}function applyMixins(i,...e){return applyMixinsInternal(i,!1,...e)}function mixingProps(i,e,n){for(const t of Object.keys(i)){const o=i[t];if(!(t in e))if("function"==typeof o.value)Reflect.defineProperty(e,t,{enumerable:!1,configurable:!0,writable:!1,value:(...i)=>n[t](...i)});else if(o.get||o.set){const i={enumerable:!1,configurable:!0};o.get&&(i.get=function(){return n[t]}),o.set&&(i.set=function(i){n[t]=i}),Reflect.defineProperty(e,t,i)}else Reflect.defineProperty(e,t,{enumerable:!1,configurable:!0,get:()=>n[t],set(i){n[t]=i}})}}function applyMixinsInternal(i,e,...n){"object"!=typeof i.mixins&&(i.mixins={}),n=n.filter(i=>!!i);for(const e of n){const n=Object.assign({},e),t=n.mixinName;i.mixins[t]=n,n.target=i}for(const n of Object.values(i.mixins)){if("setup"in n&&"function"==typeof n.setup){const i=n.setup();if(void 0!==i)for(const[e,t]of Object.entries(i))n[e]=t}if(e){mixingProps(getMixables(n),i,n)}}for(const e of Object.values(i.mixins))e.init&&e.init();mixinsAfterInit in i&&"function"==typeof i[mixinsAfterInit]&&i[mixinsAfterInit]()}const noPermitenMixableProperties=["__proto__","init","setup","target","mixinName"];function getMixables(i){const e={},n=Object.getOwnPropertyNames(i).filter(i=>!1===noPermitenMixableProperties.includes(i));for(const t of n){const n=Object.getOwnPropertyDescriptor(i,t);void 0!==n&&(e[t]=n)}return e}exports.MixinAssertError=MixinAssertError,exports.applyMixins=applyMixins,exports.assertHaveMixin=assertHaveMixin,exports.assertHaveMixins=assertHaveMixins,exports.haveMixin=haveMixin,exports.haveMixins=haveMixins,exports.isMixin=isMixin,exports.mixin=mixin,exports.useMixins=useMixins,exports.useMixinsForObject=useMixinsForObject;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
