!function(e,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((e=e||self)["ts-mix"]={})}(this,function(e){"use strict";const i="__afterMixins";class n extends Error{}function t(e,i,n){return"object"==typeof e&&"mixins"in e&&"object"==typeof e.mixins&&i.mixinName in e.mixins&&"object"==typeof e.mixins[i.mixinName]}function o(e,i,n){if(!("object"==typeof e&&"mixins"in e&&"object"==typeof e.mixins))return!1;for(const n of i)if(!1===t(e,n))return!1;return!0}function r(e,i,n){for(const t of Object.keys(e)){const o=e[t];if(!(t in i))if("function"==typeof o.value)Reflect.defineProperty(i,t,{enumerable:!1,configurable:!0,writable:!1,value:(...e)=>n[t](...e)});else if(o.get||o.set){const e={enumerable:!1,configurable:!0};o.get&&(e.get=function(){return n[t]}),o.set&&(e.set=function(e){n[t]=e}),Reflect.defineProperty(i,t,e)}else Reflect.defineProperty(i,t,{enumerable:!1,configurable:!0,get:()=>n[t],set(e){n[t]=e}})}}function s(e,n,...t){"object"!=typeof e.mixins&&(e.mixins={}),t=t.filter(e=>!!e);for(const i of t){const n=Object.assign({},i),t=n.mixinName;e.mixins[t]=n,n.target=e}for(const i of Object.values(e.mixins)){if("setup"in i&&"function"==typeof i.setup){const e=i.setup();if(void 0!==e)for(const[n,t]of Object.entries(e))i[n]=t}if(n){r(c(i),e,i)}}for(const i of Object.values(e.mixins))i.init&&i.init();i in e&&"function"==typeof e[i]&&e[i]()}const f=["__proto__","init","setup","target","mixinName"];function c(e){const i={},n=Object.getOwnPropertyNames(e).filter(e=>!1===f.includes(e));for(const t of n){const n=Object.getOwnPropertyDescriptor(e,t);void 0!==n&&(i[t]=n)}return i}e.MixinAssertError=n,e.applyMixins=function(e,...i){return s(e,!1,...i)},e.assertHaveMixin=function(e,i,o,r){if(!1===t(e,i))throw r instanceof Error?r:new n(null!=r?r:`The object does not have mixin '${i.mixinName}'`)},e.assertHaveMixins=function(e,i,t,r){if(!1===o(e,i))throw r instanceof Error?r:new n(null!=r?r:`The object does not have one or more of mixins ${i.map(e=>`'${e.mixinName}'`).join(", ")}`)},e.haveMixin=t,e.haveMixins=o,e.isMixin=function(e){var i,n,t,o,r,s,f;return"object"==typeof e&&"string"==typeof(null===(i=e)||void 0===i?void 0:i.mixinName)&&"object"==typeof(null===(n=e)||void 0===n?void 0:n.target)&&"object"==typeof(null===(o=null===(t=e)||void 0===t?void 0:t.target)||void 0===o?void 0:o.mixins)&&(null===(r=e)||void 0===r?void 0:r.mixinName)in(null===(f=null===(s=e)||void 0===s?void 0:s.target)||void 0===f?void 0:f.mixins)},e.mixin=function(e){const i=e;return Object.assign({target:void 0},i)},e.useMixins=function(e,i,n,t,o,r,f,c,u,a,l){var m;return(m=class extends e{constructor(...e){super(...e),s(this,!0,i,n,t,o,r,f,c,u,a,l)}}).__m_b_type=e,m},e.useMixinsForObject=function(e,i,n,t,o,r,f,c,u,a,l){return s(e,!0,i,n,t,o,r,f,c,u,a,l),e},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
