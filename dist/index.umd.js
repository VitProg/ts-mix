!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self)["ts-mix"]={})}(this,function(e){"use strict";const t="__afterMixins";class i extends Error{}function n(e,t,i){return"object"==typeof e&&"mixins"in e&&"object"==typeof e.mixins&&t.mixinName in e.mixins&&"object"==typeof e.mixins[t.mixinName]}function o(e,t,i){if(!("object"==typeof e&&"mixins"in e&&"object"==typeof e.mixins))return!1;for(const i of t)if(!1===n(e,i))return!1;return!0}function r(e,...t){return f(e,!1,...t)}function s(e,t,i){for(const n of Object.keys(e)){const o=e[n];if(!(n in t)){const e="function"==typeof o.value,r=!!o.get,s=!!o.set;if(e)Reflect.defineProperty(t,n,{enumerable:!1,configurable:!0,writable:!1,value:(...e)=>i[n](...e)});else if(r||s){const e={enumerable:!1,configurable:!0};r&&(e.get=function(){return i[n]}),s&&(e.set=function(e){i[n]=e}),Reflect.defineProperty(t,n,e)}else Reflect.defineProperty(t,n,{enumerable:!1,configurable:!0,get:()=>i[n],set(e){i[n]=e}})}}}function f(e,i,...n){"object"!=typeof e.mixins&&(e.mixins={}),n=n.filter(e=>!!e);for(const t of n){const i=Object.assign({},t),n=i.mixinName;e.mixins[n]=i,i.target=e}for(const t of Object.values(e.mixins)){if("setup"in t&&"function"==typeof t.setup){const e=t.setup();if(void 0!==e)for(const[i,n]of Object.entries(e))t[i]=n}if(i){s(u(t),e,t)}if(void 0!==t.rewrite){const i=t._rewrite=t.rewrite(t);for(const n of Object.keys(i)){const o=l(e,n),r=Reflect.getOwnPropertyDescriptor(i,n);if(i[n]&&o&&r){n in t.origin||Reflect.defineProperty(t.origin,n,o);const i="function"==typeof r.value,s=!!r.get,f=!!r.set,c="function"==typeof o.value,u=!!o.get,l=!!o.set,a=Object.assign({},o);if(delete a.value,delete a.get,delete a.set,c?i?a.value=r.value.bind(t.target):s&&(a.value=function(){return r.value}):u||l?(u&&(a.get=s?r.get:o.get),l&&(a.set=f?r.set:o.set,delete a.writable)):i?a.value=r.value():s||f?(s&&(a.get=r.get),f&&(a.set=r.set),delete a.writable):void 0!==r.value&&(a.value=r.value),"get"in a||"set"in a||"value"in a){Reflect.deleteProperty(e,n);try{Reflect.defineProperty(e,n,a)}catch(e){}}}}}}for(const t of Object.values(e.mixins))t.init&&t.init();t in e&&"function"==typeof e[t]&&e[t]()}const c=["__proto__","init","setup","target","mixinName"];function u(e){const t={},i=Object.getOwnPropertyNames(e).filter(e=>!1===c.includes(e));for(const n of i){const i=Object.getOwnPropertyDescriptor(e,n);void 0!==i&&(t[n]=i)}return t}function l(e,t){return e.hasOwnProperty(t)?Object.getOwnPropertyDescriptor(e,t):t in e?l(Object.getPrototypeOf(e),t):void 0}e.MixinAssertError=i,e.applyMixins=r,e.assertHaveMixin=function(e,t,o,r){if(!1===n(e,t))throw r instanceof Error?r:new i(null!=r?r:`The object does not have mixin '${t.mixinName}'`)},e.assertHaveMixins=function(e,t,n,r){if(!1===o(e,t))throw r instanceof Error?r:new i(null!=r?r:`The object does not have one or more of mixins ${t.map(e=>`'${e.mixinName}'`).join(", ")}`)},e.haveMixin=n,e.haveMixins=o,e.isMixin=function(e){var t,i,n,o,r,s,f;return"object"==typeof e&&"string"==typeof(null===(t=e)||void 0===t?void 0:t.mixinName)&&"object"==typeof(null===(i=e)||void 0===i?void 0:i.target)&&"object"==typeof(null===(o=null===(n=e)||void 0===n?void 0:n.target)||void 0===o?void 0:o.mixins)&&(null===(r=e)||void 0===r?void 0:r.mixinName)in(null===(f=null===(s=e)||void 0===s?void 0:s.target)||void 0===f?void 0:f.mixins)},e.mixin=function(e){const t=e;return Object.assign({target:void 0,origin:{}},t)},e.mixinsProp=function(e,t,i,n,o,s,f,c,u,l){return(a,p)=>{let d,v=0;Reflect.defineProperty(a,p,{get:()=>0===v?(v++,!1):(1===v&&(v++,Reflect.deleteProperty(a,p),r(a,e,t,i,n,o,s,f,c,u,l)),d),set(e){d=e}})}},e.useMixins=function(e,t,i,n,o,r,s,c,u,l,a){var p;return(p=class extends e{constructor(...e){super(...e),f(this,!0,t,i,n,o,r,s,c,u,l,a)}}).__m_b_type=e,p},e.useMixinsForObject=function(e,t,i,n,o,r,s,c,u,l,a){return f(e,!0,t,i,n,o,r,s,c,u,l,a),e},Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
